# -*- coding: utf-8 -*-
"""Kaggle_movie_review_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yXaoeADLsOoPy70JH2ENdqh55-fwyJKe
"""



dbutils.fs.cp("dbfs:/FileStore/kaggle.json", "file:/root/.kaggle/kaggle.json")

# Commented out IPython magic to ensure Python compatibility.
# %pip install kaggle

# Commented out IPython magic to ensure Python compatibility.
# %sh
chmod 600 /root/.kaggle/kaggle.json
kaggle datasets download -d ebiswas/imdb-review-dataset

from kaggle.api.kaggle_api_extended import KaggleApi
api = KaggleApi()
api.authenticate()

from zipfile import ZipFile

zf = ZipFile('imdb-review-dataset.zip')
#extracted data is saved in the same directory as notebook
zf.extractall()
zf.close()

#import dependencies
import json
import re
import time
import pandas as pd
import os

dataDir = "/databricks/driver"
json_files = ["part-01.json", "part-02.json", "part-03.json", "part-04.json", "part-05.json", "part-06.json"]
reviews_list = list()

for current_file in json_files:
    print(f" loading...")
    with open(f"{dataDir}/{current_file}", mode='r') as file:
        load_reviews = json.load(file)
        for review in load_reviews:
            reviews_list.append(review)

total_count = len(reviews_list)
print(f"Total number of reviews: {total_count:,}")

# Convert list of dicts to pandas dataframe
reviews_df = pd.DataFrame(reviews_list)

data = reviews_df
data2 = reviews_df



print(data.head)

data.info(verbose=True)

data.isna().sum()

data=data.dropna(subset=['rating'])
#drop noneType too
data = data[data["rating"].notna()]



#print(f"New reviews total: {data:,}")
print(len(data))

#change rating to int
#change review to date format


data["rating"] = data["rating"].astype(int)


data["review_date"] = pd.to_datetime(data["review_date"])


# Deleting review id
del data['review_id']

# Deleting helpful
del data['helpful']
print(data.duplicated(keep=False).sum())
data =data.drop_duplicates(keep='last')
print(len(data))



"""On a rating scale of 1-10, how many movies are in each score category?"""

data['rating'].value_counts()
data['rating'].describe()
data['rating'].hist(bins=20)

print(data['rating'].value_counts())

"""What are the top 10 most reviewed movies with a score of 10?"""

Rating = data.query("rating == 10")
print(Rating["movie"].value_counts().head(10))

"""How many unique reviewers have written reviews?"""

unique_reviewer = len(pd.unique(data['reviewer']))
print(unique_reviewer)

"""Movies by production year"""

data["review_date"] = pd.to_datetime(data["review_date"])
data['year'] = data['review_date'].dt.year
data['year'] = data["year"].astype(int)
data['month']= data['review_date'].dt.month

print(data['month'])
print(data['year'])

unique_movie_vaules = pd.unique(data['movie'])



prodcount = (data[["year", "movie"]]
             .groupby("year")
             .count()
            )
print(prodcount)

#(prodcount
# .rolling(5).mean().rename(columns={"movie":"count"})
# .plot(figsize=(15,5),
#       title="Count of Movies - by production year")
#)

fig, ax = plt.subplots(figsize=(15,7))
year_total= data.groupby(['year']).count()['movie'].plot(ax=ax)
plt.xlabel("year")
plt.ylabel("count of movies")
plt.title("Count of movies per year")

"""What is the percentage of movies that are marked as spoilers?"""

# percntage of reviews that are marked as spoilers
data["spoiler_tag"] = data["spoiler_tag"] == 1
spoiler_value_counts = data["spoiler_tag"].value_counts()
current_records_count = len(data["spoiler_tag"])
spoiler_count = spoiler_value_counts[1]
spoiler_pct = spoiler_count / current_records_count * 100
print(f"Out of {current_records_count:,} reviews {spoiler_count:,} are spoilers ({spoiler_pct:.2f}%)\n")
print(spoiler_value_counts)

import matplotlib.pyplot as plt
mylabels = ["No Spoiler", "Spoiler"]
colors=['green', 'yellow']
plt.pie(spoiler_value_counts, labels =mylabels, colors = colors, autopct='%.0f%%')
mylabels = [0, 1]
plt.title("Spoiler v. No Spoiler", fontsize=16)

plt.show()

"""Which movies have the most reviews?"""

movie_review_count = data["movie"].value_counts()
most_reviewed_movies = movie_review_count.head(1).index[0]
most_reviewed_movies_count = movie_review_count.head(1)[0]
print(f"Most reviewed movie is {most_reviewed_movies}\n")
print(f"Top 10 most reviewed movies and amount of reviews:\n{movie_review_count.head(10)}")

# return number of rows associated to each title
top_ten_movies = data.groupby("movie").size().sort_values(ascending=False)[:10]

# plot the counts
plt.figure(figsize=(12, 5))
plt.barh(y= top_ten_movies.index,
         width= top_ten_movies.values)
plt.title("10 Most Reviewed Movies", fontsize=16)
plt.ylabel("Movie", fontsize=14)
plt.xlabel("Count", fontsize=14)
plt.show()

"""Which Month are the Most reviews written??"""

#  Which dates were the most reviews written?
date_review_count = data["month"].value_counts()
unique_date_count = len(date_review_count)
most_reviews_dates = date_review_count.head(1).index[0]
#most_reviews_date_count = date_review_count.head(1)[0]
print(f"Month with most reviews is {most_reviews_dates}\n")
print(f"Top 10 review months:\n{date_review_count.head(10)}")

# creating the index and values variables for occupation
month_label= data['month'].value_counts().index
month_label_counts = data['month'].value_counts().values

# plot horizontal bar chart
plt.figure(figsize=(12,5))
plt.barh(y=month_label, width=month_label_counts)
plt.title("Top 10 Review Month", fontsize=16)
plt.ylabel("Month", fontsize=14)
plt.xlabel("Count", fontsize=14)
plt.show()



#  Which dates were the most reviews written?
date_review_count = data["review_date"].value_counts()
unique_date_count = len(date_review_count)
print(f"{unique_date_count:,} unique dates\n")
most_reviews_dates = date_review_count.head(1).index[0]
most_reviews_date_count = date_review_count.head(1)[0]
print(f"Date with most reviews is {most_reviews_dates}\n")
print(f"Top 10 review dates:\n{date_review_count.head(10)}")

rating_and_spoiler = data.groupby('rating')[['movie']].mean()
print(rating_and_spoiler)



print("Average rating of a movie: ", data["rating"].mean())



# filter the data to contain only ratings of 10
rating_10 = data[data.rating==10]

# top 10 rows ordered by rating and movie
rating_10.nlargest(10,['rating'])

Data Analysis: What are the top 10 worst reviewed movies?

# filter the data to contain onyl ratings of 1
rating_1 = data[data.rating==1]

#bottom 10 rows ordered by rating and movie
rating_1.nsmallest(10,'rating')